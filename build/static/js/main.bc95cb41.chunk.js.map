{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","status","setStatus","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","console","log","next","complete","Box","display","alignItems","justifyContent","style","minHeight","width","margin","Date","toISOString","slice","Button","variant","color","onClick","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"iPAOe,SAASA,IAAO,IAAD,EACFC,mBAAS,GADP,mBACnBC,EADmB,KACbC,EADa,OAEEF,mBAAS,QAFX,mBAEnBG,EAFmB,KAEXC,EAFW,KAI1BC,qBAAU,WACN,IAAMC,EAAe,IAAIC,IAUzB,OARUC,YAAS,KAAMC,KAAKC,YAAUJ,IACtCK,WAAU,SAACC,GACM,UAAXT,IACAD,GAAQ,SAACU,GAAD,OAASA,EAAM,OACvBC,QAAQC,IAAI,QAASF,OAItB,WACHN,EAAaS,OACbT,EAAaU,cAElB,CAACb,IAmBJ,OAAS,eACLc,EAAA,EADK,CACDC,QAAU,OACdC,WAAa,SACbC,eAAiB,SACjBC,MACI,CACIC,UAAW,QACXC,MAAO,QAPV,UAUL,uBACKF,MACD,CAAEG,OAAQ,IAFd,cAEyB,IAFzB,IAEiC,IAAIC,KAAKxB,GAAMyB,cAAcC,MAAM,GAAI,IAFxE,IAEgF,IAFhF,OAGO,IAbF,IAaO,eACZC,EAAA,EADY,CACLC,QAAU,YACjBC,MAAQ,UACRC,QAjCU,WACV3B,EAAU,UAiCViB,MACI,CAAEG,OAAQ,IALF,mBAMJ,IANI,OAOH,IApBJ,IAoBS,eACdI,EAAA,EADc,CACPC,QAAU,YACjBC,MAAQ,UACRC,QApCS,WACT3B,EAAU,QACVF,EAAQ,IAmCRmB,MACI,CAAEG,OAAQ,IALA,kBAMP,IANO,OAOL,IA3BJ,IA2BS,eACdI,EAAA,EADc,CACPC,QAAU,YACjBC,MAAQ,UACRC,QAtCU,WACV7B,EAAQ,IAsCRmB,MACI,CAAEG,OAAQ,IALA,mBAMN,IANM,OAOL,IAlCJ,IAkCS,eACdI,EAAA,EADc,CACPC,QAAU,YACjBC,MAAQ,UACRC,QAzCS,WACT3B,EAAU,SAyCViB,MACI,CAAEG,OAAQ,IALA,kBAMP,IANO,OAOL,IAzCJ,OA8CbQ,IAASC,OAAQ,cAAElC,EAAF,IAAYmC,SAASC,eAAe,SC3FrD,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdL,IAASC,OACP,cAAC,IAAMY,WAAP,UACE,cAAC9C,EAAD,MAEFmC,SAASC,eAAe,SAM1BC,M","file":"static/js/main.bc95cb41.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport React, { useEffect, useState } from 'react';\nimport { interval, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport default function App() {\n    const [time, setTime] = useState(0);\n    const [status, setStatus] = useState('stop');\n\n    useEffect(() => {\n        const unsubscribe$ = new Subject();\n\n        const o = interval(1000).pipe(takeUntil(unsubscribe$));\n        o.subscribe((val) => {\n            if (status === 'start') {\n                setTime((val) => val + 1000);\n                console.log('val: ', val);\n            }\n        });\n\n        return () => {\n            unsubscribe$.next();\n            unsubscribe$.complete();\n        };\n    }, [status]);\n\n    const start = () => {\n        setStatus('start');\n    };\n\n    const stop = () => {\n        setStatus('stop');\n        setTime(0);\n    };\n\n    const reset = () => {\n        setTime(0);\n    };\n\n    const wait = () => {\n        setStatus('wait');\n    };\n\n    return ( <\n        Box display = \"flex\"\n        alignItems = \"center\"\n        justifyContent = \"center\"\n        style = {\n            {\n                minHeight: '100vh',\n                width: '100%',\n            }\n        } >\n        <\n        span style = {\n            { margin: 20 } } > { ' ' } { new Date(time).toISOString().slice(11, 19) } { ' ' } <\n        /span>{' '} <\n        Button variant = \"contained\"\n        color = \"primary\"\n        onClick = { start }\n        style = {\n            { margin: 20 } } >\n        Start { ' ' } <\n        /Button>{' '} <\n        Button variant = \"contained\"\n        color = \"primary\"\n        onClick = { stop }\n        style = {\n            { margin: 20 } } >\n        Stop { ' ' } <\n        /Button>{' '} <\n        Button variant = \"contained\"\n        color = \"primary\"\n        onClick = { reset }\n        style = {\n            { margin: 20 } } >\n        Reset { ' ' } <\n        /Button>{' '} <\n        Button variant = \"contained\"\n        color = \"primary\"\n        onClick = { wait }\n        style = {\n            { margin: 20 } } >\n        Wait { ' ' } <\n        /Button>{' '} <\n        /Box>\n    );\n}\n\nReactDOM.render( < App / > , document.getElementById('root'));","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}